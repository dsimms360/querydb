[
  {"Answer":"","ID":1,"Opt1":"A computer programming model that organizes software design around data, or objects, rather than functions and logic","Opt2":"A style of programming characterized by the identification of classes of objects closely linked with the methods (functions) with which they are associated.","Opt3":"None of the above","Opt4":"Both a and b."},
  {"Answer":"","ID":2,"Opt1":"Abstraction and Polymorphism","Opt2":"Encapsulation","Opt3":"Inheritance","Opt4":"All of above."},
  {"Answer":"","ID":3,"Opt1":"User-defined data types that act as the blueprint for individual objects, attributes and methods","Opt2":"A template definition of the methods and variables in a particular kind of object","Opt3":"None of the above.","Opt4":"Both a and b."},
  {"Answer":"","ID":4,"Opt1":"Instances of a class created with specifically defined data","Opt2":"An abstract data type with the addition of polymorphism and inheritance","Opt3":"None of the above.","Opt4":"Both a and b."},
  {"Answer":"","ID":5,"Opt1":"Data abstraction means hiding the details about the data.","Opt2":"Control abstraction means hiding the implementation details.","Opt3":"One of the pillars of OOP.","Opt4":"All of the above."},
  {"Answer":"","ID":6,"Opt1":"The process of enclosing one or more items within a physical or logical package.","Opt2":"the bundling of data, along with the methods that operate on that data, into a single unit.","Opt3":"Neither a or b.","Opt4":"Both a and b."},
  {"Answer":"","ID":7,"Opt1":"Inheritance allows us to define a class in terms of another class.","Opt2":"mechanism where you can to derive a class from another class for a hierarchy of classes that share a set of attributes and methods.","Opt3":"Neither a or b.","Opt4":"Both a and b."},
  {"Answer":"","ID":8,"Opt1":"One interface, multiple functions.","Opt2":"the provision of a single interface to entities of different types, or the use of a single symbol to represent multiple different types","Opt3":"Neither a or b","Opt4":"Both a and b."},
  {"Answer":"","ID":9,"Opt1":"structured programming allows developing a program using a set of modules or functions. while the object oriented programming allows constructing a program using a set of objects and their interactions","Opt2":"","Opt3":"","Opt4":""},
  {"Answer":"","ID":10,"Opt1":"Structures are value types","Opt2":"Classes are reference types","Opt3":"Neither a or b","Opt4":"Both a and b."},
  {"Answer":"","ID":11,"Opt1":"Shows the relationship within the module","Opt2":"The degree to which the elements inside a module belong together","Opt3":"How a single class is designed","Opt4":"All of the above."},
  {"Answer":"","ID":12,"Opt1":"Shows the relationship between modules","Opt2":"How classes interact with each other","Opt3":"the degree of direct knowledge that one element has of another","Opt4":"All of the above."},
  {"Answer":"","ID":13,"Opt1":"a class from which other classes inherit code","Opt2":" the class from which many subclasses can be created","Opt3":"Neither a or b.","Opt4":"Both a and b."},
  {"Answer":"","ID":14,"Opt1":"classes that inherit one or more language entities from another class.","Opt2":"class that inherits state and behavior from all of its ancestors.","Opt3":"Neither a or b.","Opt4":"Both a and b."},
  {"Answer":"","ID":15,"Opt1":"Static Polymorphism is where the decision to resolve which method to accomplish, is determined during the compile time. ","Opt2":"Dynamic Polymorphism: is where the decision to choose which method to execute, is set during the run-time","Opt3":"Neither a nor b","Opt4":"Both a and b"},
  {"Answer":"","ID":16,"Opt1":"Public","Opt2":"Protected","Opt3":"Private","Opt4":"All of the above."},
  {"Answer":"","ID":17,"Opt1":"A blueprint that can be used to implement a class","Opt2":"A programming structure/syntax that allows the computer to enforce certain properties on an object","Opt3":"Neither a or b.","Opt4":"Both a and b."},
  {"Answer":"","ID":18,"Opt1":"A special method of a class or structure in object-oriented programming that initializes a newly created object of that type","Opt2":"A special type of subroutine called to create an object","Opt3":"Neither a or b.","Opt4":"Both a and b."},
  {"Answer":"","ID":19,"Opt1":"A member function that is invoked automatically when the object goes out of scope or is explicitly destroyed by a call to delete","Opt2":"a method which is invoked mechanically just before the memory of the object is released","Opt3":"Neither a or b.","Opt4":"Both a and b."},
  {"Answer":"","ID":20,"Opt1":"A mechanism for processing errors and exceptional situations","Opt2":"the process of responding to unwanted or unexpected events when a computer program runs","Opt3":"Neither a or b.","Opt4":"Both a and b."},
  {"Answer":"","ID":21,"Opt1":"A class defines the structure and behaviors of all entities of a given type","Opt2":"An object is one particular instance of that type of entity","Opt3":"Neither a or b.","Opt4":"Both a and b."},
  {"Answer":"","ID":22,"Opt1":"Overriding occurs when the method signature is the same in the superclass and the child class","Opt2":"Overloading occurs when two or more methods in the same class have the same name but different parameters","Opt3":"Neither a or b.","Opt4":"Both a and b."},
  {"Answer":"","ID":23,"Opt1":"Allow you to create blueprints for concrete classes.","Opt2":"A restricted class that cannot be used to create objects","Opt3":"Neither a or b.","Opt4":"Both a and b."},
  {"Answer":"","ID":24,"Opt1":"An interface cannot have state","Opt2":"Abstract class can have state with instance variables","Opt3":"Neither a or b.","Opt4":"Both a and b."},
  {"Answer":"","ID":25,"Opt1":"An association is known as composition when one object owns another","Opt2":"Association is known as aggregation when one object uses another object","Opt3":"Neither a or b.","Opt4":"Both a and b."},
  {"Answer":"","ID":26,"Opt1":"A class should have one and only one reason to change, meaning that a class should have only one job.","Opt2":"First principle of SOLID","Opt3":"Neither a or b","Opt4":"Both a and b."},
  {"Answer":"","ID":27,"Opt1":"Objects or entities should be open for extension but closed for modification.","Opt2":"Second principle of SOLID","Opt3":"Neither a or b","Opt4":"Both a and b."},
  {"Answer":"","ID":28,"Opt1":"every subclass or derived class should be substitutable for its base or parent class.","Opt2":"Third principle of SOLID","Opt3":"Neither a or b","Opt4":"Both a and b."},
  {"Answer":"","ID":29,"Opt1":"A client should never be forced to implement an interface that it doesn’t use, or clients shouldn’t be forced to depend on methods they do not use.","Opt2":"Fourth principle of SOLID","Opt3":"Neither a or b.","Opt4":"Both a and b."},
  {"Answer":"","ID":30,"Opt1":"Entities must depend on abstractions, not on concretions. It states that the high-level module must not depend on the low-level module, but they should depend on abstractions.","Opt2":"Fifth principle of SOLID","Opt3":"Neither a or b.","Opt4":"Both a and b."}
]